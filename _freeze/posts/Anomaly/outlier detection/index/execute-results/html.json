{
  "hash": "aa1089818e0ddf9f7b06e91f4f935467",
  "result": {
    "markdown": "---\ntitle: \"Anomaly/outlier detection\"\ntitle-block-banner: true\ndescription: \"Theory and an example related to Anomaly Detection\"\ncategories: [Isolation Forest, Supervised Learning]\nauthor: \"Akash Mittal\"\ndate: \"11/21/2023\"\n---\n\n### Introduction\n\nAnomaly detection, also known as outlier detection, is a branch of machine learning that focuses on identifying anomalies. Anomalies could be defined as instances or patterns in a dataset that deviate significantly from the majority of the data. \n\nAnomaly detection can be performed in both supervised and unsupervised settings. This can be done learning to distinguish between normal and anomalous instances in the case of supervised learning. In the case for unsupervised learning the algorithm works with unlabeled data and aims to identify patterns that deviate from the norm without prior knowledge of anomalies.\n\nCommon Approaches taken for anomaly detection are the following:\n\n1. Statistical Methods: These methods often involve defining a statistical model   for the normal behavior of the data and identifying instances that significantly deviate from this model.\n\n2. Machine Learning Models: Machine learning models, such as Isolation Forests, One-Class SVM (Support Vector Machines), and Autoencoders, can be used for anomaly detection.\n\n3. Density-Based Methods: These methods identify anomalies as instances that have lower density compared to their neighbors. DBSCAN (Density-Based Spatial Clustering of Applications with Noise) is an example of a density-based approach.\n\nCommon metrics for evaluating anomaly detection models include precision, recall, F1 score, and the area under the Receiver Operating Characteristic (ROC) curve. \n\nOne common aspect in anomaly detection that is different from other optimzation related machine learning methods is the setting of an appropriate threshold. The threshold determines the point beyond which instances are considered anomalies. Often visual reprsentations can help identify this. The choice of the threshold often involves trade-offs between false positives and false negatives.   \n\n### Example of Anomaly Detection using Isolation Forest\n\nIn this example, the tips dataset which is a preloaded seaborn dataset is used. which can easily be obtained by following the just the code below.\n\n**Load Dataset**\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.ensemble import IsolationForest\nimport matplotlib.pyplot as plt\n\ntips = sns.load_dataset('tips')\n\ntips.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>total_bill</th>\n      <th>tip</th>\n      <th>sex</th>\n      <th>smoker</th>\n      <th>day</th>\n      <th>time</th>\n      <th>size</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>16.99</td>\n      <td>1.01</td>\n      <td>Female</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10.34</td>\n      <td>1.66</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>21.01</td>\n      <td>3.50</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>23.68</td>\n      <td>3.31</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>24.59</td>\n      <td>3.61</td>\n      <td>Female</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n**Visualize the Dataset**\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nsns.scatterplot(x='total_bill', y='tip', data=tips)\nplt.title('Scatter Plot of Total Bill vs. Tip')\nplt.xlabel('Total Bill')\nplt.ylabel('Tip')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=585 height=449}\n:::\n:::\n\n\n**Train the Isolation Forest model and Predict the Anomalies**\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nX = tips[['total_bill', 'tip']]\nmodel = IsolationForest(contamination=0.05, random_state=42)  \nmodel.fit(X)\ntips['anomaly'] = model.predict(X)\n```\n:::\n\n\n***Visualize the Anomalies**\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nplt.figure(figsize=(10, 6))\n\nplt.scatter(tips['total_bill'][tips['anomaly'] == 1], tips['tip'][tips['anomaly'] == 1], c='blue', label='Normal')\n\nplt.scatter(tips['total_bill'][tips['anomaly'] == -1], tips['tip'][tips['anomaly'] == -1], c='red', label='Anomaly')\n\nplt.title('Anomaly Detection with Isolation Forest')\nplt.xlabel('Total Bill')\nplt.ylabel('Tip')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=808 height=523}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}